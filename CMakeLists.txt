CMAKE_MINIMUM_REQUIRED(VERSION 3.10)
SET(PROJECT_NAME FenixEngine)

PROJECT(${PROJECT_NAME} VERSION 0.0.1)

SET(CMAKE_CXX_STANDARD 11)
SET(
	SOURCES 
		src/window.cpp
		src/exceptions.cpp
		src/scene.cpp
		src/viewport.cpp
		src/events/event_handler.cpp
		src/nodes/node.cpp
		src/physics/geometry.cpp
		src/graphics/sprite.cpp
		src/graphics/graphic.cpp
)

SET(
	INCLUDE_FILES
		include/${PROJECT_NAME}.h
		include/exceptions.h
		include/os.h
		include/scene.h
		include/viewport.h
		include/window.h
		include/event_handler.h
		include/graphic.h
		include/sprite.h
		include/text.h
		include/draggable_node.h
		include/node.h
		include/geometry.h
)

IF (NOT PREFIX)
	SET(PREFIX ${CMAKE_CURRENT_SOURCE_DIR}/build)
ENDIF (NOT PREFIX)

IF (NOT ARCH)
	SET(ARCH x86)
ENDIF (NOT ARCH)

CONFIGURE_FILE(
	"${CMAKE_CURRENT_SOURCE_DIR}/include/${PROJECT_NAME}.h.in"
	"${CMAKE_CURRENT_SOURCE_DIR}/include/${PROJECT_NAME}.h"
	NEWLINE_STYLE "UNIX")

INCLUDE_DIRECTORIES("${CMAKE_CURRENT_SOURCE_DIR}/include")
IF (WIN32)
	SET(SYSTEM_LIB_PATHS 
		"${CMAKE_CURRENT_SOURCE_DIR}/libSDL2/${ARCH}" )
	INCLUDE_DIRECTORIES("C:/SDL2/include" "C:/SDL2-Image/include" "C:/SDL2_ttf/include")
	
	SET(DLL_INSTALLED_LIBS 
		"${SYSTEM_LIB_PATHS}/SDL2.dll"
		"${SYSTEM_LIB_PATHS}/SDL2_image.dll"
		"${SYSTEM_LIB_PATHS}/SDL2_ttf.dll"
		"${SYSTEM_LIB_PATHS}/libjpeg-9.dll"
		"${SYSTEM_LIB_PATHS}/libpng16-16.dll"
		"${SYSTEM_LIB_PATHS}/libtiff-5.dll"
		"${SYSTEM_LIB_PATHS}/libfreetype-6.dll"
		"${SYSTEM_LIB_PATHS}/zlib1.dll"
	)
ELSE (WIN32)
	SET(DLL_INSTALLED_LIBS "")
	SET(SYSTEM_LIB_PATHS "/lib" "/usr/lib" "/usr/local/lib")
	INCLUDE_DIRECTORIES("/usr/include" "/usr/local/include" "/usr/include/SDL2" "/usr/local/include/SDL2")

ENDIF(WIN32)

SET(INSTALL_LIBDIR "${PREFIX}/lib")
SET(INSTALL_INCLUDEDIR "${PREFIX}/include/${PROJECT_NAME}")
CONFIGURE_FILE(${PROJECT_NAME}.pc.in ${PROJECT_NAME}.pc @ONLY)

ADD_LIBRARY(objlib OBJECT ${SOURCES})
ADD_LIBRARY(${PROJECT_NAME}_SHARED SHARED $<TARGET_OBJECTS:objlib>)
ADD_LIBRARY(${PROJECT_NAME}_STATIC STATIC $<TARGET_OBJECTS:objlib>)
SET_PROPERTY(TARGET objlib PROPERTY POSITION_INDEPENDENT_CODE 1)

SET_TARGET_PROPERTIES(${PROJECT_NAME}_SHARED
	PROPERTIES
		VERSION ${PROJECT_VERSION}
		SOVERSION 0
		PUBLIC_HEADER "${INCLUDE_FILES}"
		OUTPUT_NAME ${PROJECT_NAME}
)
SET_TARGET_PROPERTIES(${PROJECT_NAME}_STATIC
	PROPERTIES
		OUTPUT_NAME ${PROJECT_NAME}
)


FIND_LIBRARY(SDL2_LIBRARY SDL2 PATHS ${SYSTEM_LIB_PATHS})
FIND_LIBRARY(SDL2_MAIN_LIBRARY SDL2main PATHS ${SYSTEM_LIB_PATHS})
FIND_LIBRARY(SDL2_IMAGE_LIBRARY SDL2_image PATHS ${SYSTEM_LIB_PATHS})
FIND_LIBRARY(SDL2_TTF_LIBRARY SDL2_ttf PATHS ${SYSTEM_LIB_PATHS})

TARGET_LINK_LIBRARIES(${PROJECT_NAME}_SHARED ${SDL2_LIBRARY})
TARGET_LINK_LIBRARIES(${PROJECT_NAME}_SHARED ${SDL2_MAIN_LIBRARY})
TARGET_LINK_LIBRARIES(${PROJECT_NAME}_SHARED ${SDL2_IMAGE_LIBRARY})
TARGET_LINK_LIBRARIES(${PROJECT_NAME}_SHARED ${SDL2_TTF_LIBRARY})

TARGET_LINK_LIBRARIES(${PROJECT_NAME}_STATIC ${SDL2_LIBRARY})
TARGET_LINK_LIBRARIES(${PROJECT_NAME}_STATIC ${SDL2_MAIN_LIBRARY})
TARGET_LINK_LIBRARIES(${PROJECT_NAME}_STATIC ${SDL2_IMAGE_LIBRARY})
TARGET_LINK_LIBRARIES(${PROJECT_NAME}_STATIC ${SDL2_TTF_LIBRARY})

INSTALL(TARGETS ${PROJECT_NAME}_SHARED ${PROJECT_NAME}_STATIC
	LIBRARY		DESTINATION "${INSTALL_LIBDIR}"
	ARCHIVE		DESTINATION "${INSTALL_LIBDIR}"
	PUBLIC_HEADER	DESTINATION "${INSTALL_INCLUDEDIR}"
)
